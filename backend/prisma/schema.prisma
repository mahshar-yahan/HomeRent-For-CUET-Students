// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
 
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String?
  email     String    @unique
  password  String
  role      Role?     @default(BUYER)
  posts     Post[]
  book      Book[]
  profile   Profile?
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Book {
  id        String   @id @default(uuid())
  seat      Int
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id           String    @id @default(uuid())
  title        String
  photos       String[]  @default([])
  price        Int       @default(0)
  seatCapacity Int       @default(0)
  type         String
  available    Boolean   @default(true)
  contact      String
  details      String
  location     String
  coordinates  String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  comments     Comment[]
  book         Book[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
}

model Profile {
  id        String   @id @default(uuid())
  address   String?
  phone     String?
  images    String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
}

enum Role {
  BUYER
  ADMIN
  SELLER
}
